diff -burN SDL_mixer-1.2.11.orig//configure SDL_mixer-1.2.11//configure
--- SDL_mixer-1.2.11.orig//configure	2009-11-12 07:44:13.000000000 +0100
+++ SDL_mixer-1.2.11//configure	2011-02-20 18:54:28.272060816 +0100
@@ -13275,7 +13275,7 @@
   $as_echo_n "(cached) " >&6
 else
   ac_check_lib_save_LIBS=$LIBS
-LIBS="-lvorbisfile  $LIBS"
+LIBS="-lvorbisfile -lvorbis -lm -logg $LIBS"
 cat >conftest.$ac_ext <<_ACEOF
 /* confdefs.h.  */
 _ACEOF
diff -burN SDL_mixer-1.2.11.orig//music_mod.c SDL_mixer-1.2.11/music_mod.c
--- SDL_mixer-1.2.11.orig//music_mod.c	2009-11-12 08:48:25.000000000 +0100
+++ SDL_mixer-1.2.11/music_mod.c	2011-03-01 21:05:20.901324452 +0100
@@ -45,6 +45,8 @@
 
 static int music_swap8;
 static int music_swap16;
+static int music_swapf;
+static int music_tof;
 
 /* Initialize the MOD player, with the given mixer settings
    This function returns 0, or -1 if there was an error.
@@ -60,6 +62,8 @@
 	/* Set the MikMod music format */
 	music_swap8 = 0;
 	music_swap16 = 0;
+	music_swapf = 0;
+	music_tof = 0;
 	switch (mixerfmt->format) {
 
 		case AUDIO_U8:
@@ -85,6 +89,20 @@
 		}
 		break;
 
+		case AUDIO_F32LSB:
+		case AUDIO_F32MSB: {
+			music_tof = 1;
+#if SDL_BYTEORDER == SDL_LIL_ENDIAN
+			if ( mixerfmt->format == AUDIO_F32MSB ) {
+#else
+			if ( mixerfmt->format == AUDIO_F32LSB ) {
+#endif
+				music_swapf = 1;
+			}
+			*mikmod.md_mode = DMODE_16BITS;
+		}
+		break;
+
 		default: {
 			Mix_SetError("Unknown hardware audio format");
 			return -1;
@@ -258,6 +276,9 @@
 /* Play some of a stream previously started with MOD_play() */
 int MOD_playAudio(MODULE *music, Uint8 *stream, int len)
 {
+	if (music_tof)
+		len /= 2;
+
 	if (current_output_channels > 2) {
 		int small_len = 2 * len / current_output_channels;
 		int i;
@@ -284,6 +305,7 @@
 				}
 				break;
 			case 16:
+			case 32:
 				for ( i=small_len/4; i; --i ) {
 					src -= 4;
 					dst -= 2 * current_output_channels;
@@ -328,6 +350,32 @@
 			dst += 2;
 		}
 	}
+	if ( music_tof ) {
+		const Sint16 *src;
+		float *dst;
+		int i;
+
+		src = (const Sint16 *)(stream + len);
+		len *= 2;
+		dst = (float *)(stream + len);
+		for ( i=(len/4); i; --i ) {
+			const Sint16 tmp = *--src;
+			*--dst = ((float)tmp) * 3.05185094759972e-05f;
+		}
+		if ( music_swapf ) {
+			Uint8 *dst, tmp;
+			dst = stream;
+			for ( i=(len/4); i; --i ) {
+				tmp = dst[0];
+				dst[0] = dst[3];
+				dst[3] = tmp;
+				tmp = dst[1];
+				dst[1] = dst[2];
+				dst[2] = tmp;
+				dst += 4;
+			}
+		}
+	}
 	return 0;
 }
 
